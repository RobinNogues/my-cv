# nginx/conf.d/default.conf.template
server {
    listen 80;
    server_name ${NGINX_HOST} www.${NGINX_HOST};

    # Permet à Certbot de valider le domaine # Chemins vers vos certificats SSL
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://${NGINX_HOST}$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name ${NGINX_HOST} www.${NGINX_HOST};

    
    ssl_certificate ${SSL_CERTIFICATE_PATH};
    ssl_certificate_key ${SSL_CERTIFICATE_KEY_PATH};
    
    # Paramètres SSL/TLS recommandés pour une meilleure sécurité # Utilisez des DNS publics pour la résolution OCSP
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305';
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1h;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # Redirection permanente de www vers non-www pour le SEO
    if ($host = www.${NGINX_HOST}) {
        return 301 https://${NGINX_HOST}$request_uri;
    }

    # En-têtes de sécurité # La Content-Security-Policy (CSP) suivante est un bon point de départ.
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    # La Content-Security-Policy (CSP) suivante est un bon point de départ.
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://cdn.tailwindcss.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdnjs.cloudflare.com; font-src 'self' https://fonts.gstatic.com https://cdnjs.cloudflare.com; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none';" always;
    # ATTENTION: N'ajoutez l'en-tête HSTS (ci-dessous) qu'une fois que vous êtes certain que votre configuration HTTPS est stable.
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        proxy_pass http://frontend:80; # 'frontend' est le nom du service dans docker-compose
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    
    location /api/ {
        proxy_pass http://backend:8000; # 'backend' est le nom du service dans docker-compose
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
